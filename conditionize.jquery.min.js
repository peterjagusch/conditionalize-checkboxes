( function( $ ) {
    $.fn.conditionize = function( options ) {

        // Set options. NOTE: Replace undefined with 'false'
        // Visit https://stackoverflow.com/q/33017148/5055891 for more information
        if ( options && options.hasOwnProperty( "ifFalse" ) && ( options.ifFalse === undefined ) ) {
            options.ifFalse = false;
        }
        if ( options && options.hasOwnProperty( "ifTrue" ) && ( options.ifTrue === undefined ) ) {
            options.ifTrue = false;
        }
        var settings = $.extend( {

            // Array of events on which to update condition
            updateOn: "change",

            // Update on page load
            onload: true,

            // Set actions for condition states
            // Set value to any of: false / null / '' / 'ignore' / []
            // if you want to ignore the state.  Otherwise set value to
            // * a sting (key for built-in actions in $.fn.conditionize.actions)
            // * a function like function($section) {...}
            // * or an array consisting of strings and/or function described above
            ifTrue: "show",
            ifFalse: "hide"
        }, options );

        // Prepare and validate settings
        if ( Array.isArray( settings.updateOn ) ) {
            settings.updateOn = settings.updateOn.join( " " );
        }
        function prepareActions( actions ) {
            if ( ( !actions ) || ( actions === "ignore" ) ) {
                return [];
            }
            if ( typeof actions === "string" ) {
                actions = [ actions ];
            }
            if ( typeof actions === "function" ) {
                actions = [ actions ];
            }
            if ( Array.isArray( actions ) &&
                actions.every( function( val ) {
                    return ( ( ( typeof val === "string" ) &&
                            ( $.fn.conditionize.actions.hasOwnProperty( val.split( ":" )[ 0 ] ) )
                        ) ||
                        ( typeof val === "function" ) );
                } )
            ) {
                return actions;
            }

            throw new TypeError( "Incorrect action type for ifTrue or ifFalse." +
                "ifTrue/ifFalse must be either a string with default action name," +
                "i.e. one of \"show\", \"hide\", \"clear\", \"trigger\" or a function with " +
                "one argument ($section);  or array consisting of them." );
        }
        settings.ifTrue = prepareActions( settings.ifTrue );
        settings.ifFalse = prepareActions( settings.ifFalse );

        // Main handler for a conditional section
        var handler = function( isMet, $section ) {
            var actions;
            if ( isMet ) {
                actions = settings.ifTrue;
            } else {
                actions = settings.ifFalse;
            }

            actions.forEach(
                function( h ) {
                    if ( typeof h === "string" ) {
                        if ( h.substring( 0, 7 ) === "trigger" ) {
                            if ( h === "trigger" ) {
                                $.fn.conditionize.actions.trigger( $section, settings.updateOn );
                            } else {
                                $.fn.conditionize.actions.trigger( $section, h.slice( 8 ) );
                            }
                        } else {
                            $.fn.conditionize.actions[ h ]( $section );
                        }
                    } else {
                        if ( typeof h === "function" ) {
                            h( $section );
                        }
                    }
                }
            );
        };

        return this.each( function() {
            var $section = $( this );
            var cond = $( this ).data( "condition" );
            var allFields = []; // All fields in the condition
            // First get all (distinct) used field/inputs
            cond = cond.replace( $.fn.conditionize.re, function( match, group ) {
                var selector = ( group.substring( 0, 1 ) === "#" ) ?
                    group :
                    "[name='" + group + "']";
                if ( $( selector ).length ) {
                    if ( allFields.indexOf( selector ) === -1 ) {
                        allFields.push( selector );
                    }
                    return "$.fn.conditionize.getValue(\"" + selector + "\")";
                } else {
                    return group;
                }

            } );

            //Set up event listeners
            allFields.forEach( function( field ) {
                $( field ).on( settings.updateOn, function() {
                    if (($(field).attr('type') === 'checkbox')) {
                        handler($.fn.conditionize.actions.checkBoxes($section, field, cond), $section)
                        return
                    }else{
                        handler( eval( cond ), $section );
                    }
                } );
            } );

            //Show based on current value on page load
            if ( settings.onload ) {

                // If already loaded
                if ( document.readyState === "complete" ) {
                    handler( eval( cond ), $section );
                } else {
                    $( window ).on( "load", function() {

                        allFields.forEach( function( field ) {
                            $(field).getType() === 'checkbox' ? handler($.fn.conditionize.actions.checkBoxes($section, field, cond), $section) : handler( eval( cond ), $section );
                        })
                    } );
                }
            }
        } );
    };

    $.extend( $.fn.conditionize, {

        // Prepare a regexp to catch potential field names/ids.
        // Regexp has format like: "(#?[" + allowedNameSymbols + "]+)" + ifNotInQuotes
        re: new RegExp( "(#?[a-z0-9_\\[\\]-]+)" +
            "(?:(?=([^\"]*\"[^\"]*\")*[^\"]*$)(?=([^']*'[^']*')*[^']*$))", "gi" ),

        /**
         * Get value(s) of a field by its selector
         *
         * @param {String} selector A string containing a standard jQuery selector expression
         *
         * @return {(String|Array)} A value of the field or an array values for each field if there are more than one matching inputs
         */
        getValue: function( selector ) {
            var vals;

            // Radio buttons are a special case. They can not be multivalue fields.
            if ( $( selector ).attr( "type" ) === "radio" ) {
                vals = $( selector + ":checked" ).val();
            } else {
                vals = $( selector ).map( function() {
                    if ( $( this ).attr( "type" ) === "checkbox" ) {
                        return this.checked ? this.value : false;
                    } else {
                        return $( this ).val();
                    }
                } ).get();
                if ( vals.length === 1 ) {
                    vals = vals[ 0 ];
                }
            }
            return vals;
        },

        // Built-in actions
        actions: {
            show: function( $section ) {
                $section.slideDown();
            },
            hide: function( $section ) {
                $section.slideUp();
            },
            clearFields: function( $section ) {
                $section.find( "select, input" ).each( function() {
                    if ( ( $( this ).attr( "type" ) === "radio" ) ||
                        ( $( this ).attr( "type" ) === "checkbox" ) ) {
                        $( this ).prop( "checked", false );
                    } else {
                        $( this ).val( "" );
                    }
                    $( this ).trigger( "change" );
                } );
            },
			removeValuesWhenHidden: function($section){
				$section.find('select, input').each(function () {
                    if (($(this).attr('type') === 'radio') || ($(this).attr('type') === 'checkbox')) {
                        $(this).prop('checked', false).trigger('change');
                    }
                    else {
                        if ($(this).attr('type') !== 'hidden') {
                            $(this).val('').trigger('change');
                        }
                    }
                });				
			},
            resetRadioFields: function( $section ) {
                //If Showing - Find radio and checkboxes
                $section.find('input').each(function () {

                    if (($(this).attr('type') === 'radio') || ($(this).attr('type') === 'checkbox')) {
                        //If Showing - If pre-checked, check again
                        if ($(this).attr('checked')) {
                            $(this).prop('checked', true).trigger('change');
                        }
                    }
                    //If has pre-Value - Add value again
                    var attributeValue = $(this).attr('value');
                    if (attributeValue) {
                        $(this).val(attributeValue);
                    }
                });

                $section.find('select').each(function (index) {
                    var selectedOptions = [];
                    $(this).find("option").each(function () {
                        //If selected is found, set it.
                        if ($(this).attr('selected')) {
                            selectedOptions[index] = ($(this).val())
                        }
                        //If selected is not found, set it to first.
                        if (selectedOptions.length == 0) {
                            selectedOptions.push($(this).val())
                        }
                    });
                    //trigger select from array for each dropdown
                    $(this).val('' + selectedOptions[index] + '').trigger('change');
                })
            },
            trigger: function( $section, events ) {
                events = events.replace( ",", " " );
                events.split( " " ).forEach( function( e ) {
                    $section.trigger( e );
                } );
            },
            checkBoxes:function( $section, field, cond ) {
                var checkboxArray = $(field + 'input[type=checkbox]:checked').map(function(_, el) {return $(el).val();}).get();
                let intersection, mySubString, split_string = ''
                let arr = []
                switch(true) {
                    case cond.includes("undefined") && cond.includes("!="):
                        intersection = (checkboxArray.length != 0)
                        break;
                    case cond.includes("undefined") && cond.includes("==="):
                        intersection = (checkboxArray.length == 0)
                        break;
                    case cond.includes("&&"):
                        split_string = cond.split("&&");
                        $(split_string).each(function(  ) {
                            thisIs = this.toString().replace(/[()]/g, '');
                            arr.push(eval($.fn.conditionize.actions.checkBoxes($section, field, thisIs)))
                        });
                        intersection = arr.includes(false) ? false : true
                        break;
                    case cond.includes("||"):
					 split_string = cond.split("||");
                        $(split_string).each(function(  ) {
                            thisIs = this.toString().replace(/[()]/g, '');
                            arr.push(eval($.fn.conditionize.actions.checkBoxes($section, field, thisIs)))
                        });
                        intersection = arr.includes(true)
                        break;
                    case cond.includes("==="):
                        mySubString = cond.substring(cond.indexOf("===")+3)
                        intersection = checkboxArray.filter(element => mySubString.includes(element))
                        intersection = (intersection.length == 0) ? false: true
                        break;
                    case cond.includes("!=="):
                        mySubString = cond.substring(cond.indexOf("!==") +3).replace(/['"]+/g, '')
                        intersection = checkboxArray.filter(element => mySubString.includes(element))
                        intersection = (intersection.length == 0) ? true: false
                        break;
                    case (cond.includes("includes") && !cond.startsWith("!")):
                        mySubString = cond.substring(cond.indexOf("[") + 1, cond.indexOf("]")).replace(/['"]+/g, '');
                        mySubString = mySubString.replaceAll("'","")
                        split_string = mySubString.split(",");
                        intersection = checkboxArray.filter(element => split_string.includes(element));
                        intersection = (intersection.length == 0) ? false: true
                        if(cond.includes(undefined) || cond.includes("['']") || cond.includes("''")){
                            if(checkboxArray.length === 0){
                                intersection = true
                            }
                        }
                        break;
                    case cond.includes("excludes"):
                    case (cond.includes("includes") && cond.startsWith("!")):
                        mySubString = cond.substring(cond.indexOf("[") + 1, cond.indexOf("]")).replace(/['"]+/g, '');
                        mySubString = mySubString.replaceAll("'","")
                        split_string = mySubString.split(",");
                        intersection = checkboxArray.filter(element => split_string.includes(element));
                        intersection = (intersection.length == 0) ? true: false
                        if(cond.includes(undefined) || cond.includes("['']") || cond.includes("''")){
                            if(checkboxArray.length === 0){
                                intersection = false
                            }
                        }
                        break;
                    default:
                        intersection = eval(cond)
                }
                return eval( intersection )
            },
        }
    } );
} )( jQuery );



if (!Array.prototype.includes) {
    Object.defineProperty(Array.prototype, 'includes', {
        value: function (searchElement, fromIndex) {

            if (this == null) {
                throw new TypeError('"this" is null or not defined');
            }

            // 1. Let O be ? ToObject(this value).
            var o = Object(this);

            // 2. Let len be ? ToLength(? Get(O, "length")).
            var len = o.length >>> 0;

            // 3. If len is 0, return false.
            if (len === 0) {
                return false;
            }

            // 4. Let n be ? ToInteger(fromIndex).
            //    (If fromIndex is undefined, this step produces the value 0.)
            var n = fromIndex | 0;

            // 5. If n ≥ 0, then
            //  a. Let k be n.
            // 6. Else n < 0,
            //  a. Let k be len + n.
            //  b. If k < 0, let k be 0.
            var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);

            function sameValueZero(x, y) {
                return x === y || (typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y));
            }

            // 7. Repeat, while k < len
            while (k < len) {
                // a. Let elementK be the result of ? Get(O, ! ToString(k)).
                // b. If SameValueZero(searchElement, elementK) is true, return true.
                if (sameValueZero(o[k], searchElement)) {
                    return true;
                }
                // c. Increase k by 1. 
                k++;
            }

            // 8. Return false
            return false;
        }
    });
}

String.prototype.replaceAll = function (search, replacement) {
    var target = this;
    return target.replace(new RegExp(search, 'g'), replacement);
};


if (!Array.prototype.excludes) {
    Object.defineProperty(Array.prototype, 'excludes', {
        value: function (searchElement, fromIndex) {

            if (this == null) {
                throw new TypeError('"this" is null or not defined');
            }

            // 1. Let O be ? ToObject(this value).
            var o = Object(this);

            // 2. Let len be ? ToLength(? Get(O, "length")).
            var len = o.length >>> 0;

            // 3. If len is 0, return false.
            if (len === 0) {
                return true;
            }

            // 4. Let n be ? ToInteger(fromIndex).
            //    (If fromIndex is undefined, this step produces the value 0.)
            var n = fromIndex | 0;

            // 5. If n ≥ 0, then
            //  a. Let k be n.
            // 6. Else n < 0,
            //  a. Let k be len + n.
            //  b. If k < 0, let k be 0.
            var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);

            function sameValueZero(x, y) {
                return x === y || (typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y));
            }

            // 7. Repeat, while k < len
            while (k < len) {
                // a. Let elementK be the result of ? Get(O, ! ToString(k)).
                // b. If SameValueZero(searchElement, elementK) is true, return true.
                if (sameValueZero(o[k], searchElement)) {
                    return false;
                }
                // c. Increase k by 1. 
                k++;
            }

            // 8. Return false
            return true;
        }
    });
}


if (!Array.prototype.includes) {
    Object.defineProperty(Array.prototype, 'includes', {
        value: function (searchElement, fromIndex) {

            if (this == null) {
                throw new TypeError('"this" is null or not defined');
            }

            // 1. Let O be ? ToObject(this value).
            var o = Object(this);

            // 2. Let len be ? ToLength(? Get(O, "length")).
            var len = o.length >>> 0;

            // 3. If len is 0, return false.
            if (len === 0) {
                return false;
            }

            // 4. Let n be ? ToInteger(fromIndex).
            //    (If fromIndex is undefined, this step produces the value 0.)
            var n = fromIndex | 0;

            // 5. If n ≥ 0, then
            //  a. Let k be n.
            // 6. Else n < 0,
            //  a. Let k be len + n.
            //  b. If k < 0, let k be 0.
            var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);

            function sameValueZero(x, y) {
                return x === y || (typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y));
            }

            // 7. Repeat, while k < len
            while (k < len) {
                // a. Let elementK be the result of ? Get(O, ! ToString(k)).
                // b. If SameValueZero(searchElement, elementK) is true, return true.
                if (sameValueZero(o[k], searchElement)) {
                    return true;
                }
                // c. Increase k by 1. 
                k++;
            }

            // 8. Return false
            return false;
        }
    });
}

String.prototype.replaceAll = function (search, replacement) {
    var target = this;
    return target.replace(new RegExp(search, 'g'), replacement);
};


if (!Array.prototype.excludes) {
    Object.defineProperty(Array.prototype, 'excludes', {
        value: function (searchElement, fromIndex) {

            if (this == null) {
                throw new TypeError('"this" is null or not defined');
            }

            // 1. Let O be ? ToObject(this value).
            var o = Object(this);

            // 2. Let len be ? ToLength(? Get(O, "length")).
            var len = o.length >>> 0;

            // 3. If len is 0, return false.
            if (len === 0) {
                return true;
            }

            // 4. Let n be ? ToInteger(fromIndex).
            //    (If fromIndex is undefined, this step produces the value 0.)
            var n = fromIndex | 0;

            // 5. If n ≥ 0, then
            //  a. Let k be n.
            // 6. Else n < 0,
            //  a. Let k be len + n.
            //  b. If k < 0, let k be 0.
            var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);

            function sameValueZero(x, y) {
                return x === y || (typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y));
            }

            // 7. Repeat, while k < len
            while (k < len) {
                // a. Let elementK be the result of ? Get(O, ! ToString(k)).
                // b. If SameValueZero(searchElement, elementK) is true, return true.
                if (sameValueZero(o[k], searchElement)) {
                    return false;
                }
                // c. Increase k by 1. 
                k++;
            }

            // 8. Return false
            return true;
        }
    });
}
function UpdateValue(key, value)
{
    for (var i = 0; i < array.length; i++) {
        if (array[i].Key == key) {
            array[i].Value = value;
            break;
        }
    }
}

$.fn.getType = function(){ return this[0].tagName == "INPUT" ? this[0].type.toLowerCase() : this[0].tagName.toLowerCase(); }